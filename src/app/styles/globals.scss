@use './variables' as *;

:root {
  @each $key, $value in $colors {
    --color-#{$key}: #{$value};
  }

  @each $key, $value in $breakpoints {
    --breakpoint-#{$key}: #{$value};
  }

  @each $key, $value in $spacings {
    --spacing-#{$key}: #{$value};
  }
}

body {
  padding: 0;
  margin: 0;
  font-family: sans-serif;
}

.section {
  box-sizing: border-box;
  width: 100%;
  height: 100vh;
  padding: map-get($spacings, 9) map-get($spacings, 5);

  &--no-padding {
    padding: 0;
  }

  &--center-content {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &--with-positionned-children {
    position: relative;
  }
}

.grid {
  display: grid;

  &:not(.grid--no-gutter) {
    gap: map-get($spacings, 4);
  }

  &--halves {
    @media screen and (min-width: map-get($breakpoints, 'md')) {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  &--thirds {
    @media screen and (min-width: map-get($breakpoints, 'md')) {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  &--fourths {
    @media screen and (min-width: map-get($breakpoints, 'md')) {
      grid-template-columns: repeat(2, 1fr);
    }

    @media screen and (min-width: map-get($breakpoints, 'lg')) {
      grid-template-columns: repeat(4, 1fr);
    }
  }
}

.fixed-timeline {
  color: white;
  
  &__item {
    padding: 1em 0;
    margin: 0;
    position: fixed;
    z-index: 1;
    mask-image: linear-gradient(
      to bottom,
      #0000,
      #000 1em,
      #000 calc(100% - 1em),
      #0000);
      
    > * {        
      transform: translateY(calc(100% + 2em));
      transition: transform 1s ease-in-out;

      .displayed & {
        transform: translateY(0);
      }
  
      .passed & {
        transform: translateY(calc(-100% - 2em));
      }
    }
  }

  .center-x {
    left: 50%;
    transform: translateX(-50%);
  }

  .center-y {
    top: 50%;
    transform: translateY(-50%);

    &.center-x {
      transform: translate(-50%, -50%);
    }
  }
  
  .start-x {
    left: 20px;

    [dir="rtl"] & {
      left: auto;
      right: 20px;
    }
  }

  .start-y {
    top: 20px;
  }

  .end-x {
    right: 20px;

    [dir="rtl"] & {
      right: auto;
      left: 20px;
    }
  }

  .end-y {
    bottom: 20px;
  }

  ul, p, h1, h2 {
    margin: 0;
    padding: 0;
    list-style-type: none;
  }
}

.timeline {
  width: 100%;
  height: var(--scrollable-height);
  position: absolute;
  top: 0;
  color: white;

  &__mask {
    position: fixed;
    width: 100%;
    height: var(--maskHeight);
    top: var(--maskTop);
    left: 0;
    mask-image: linear-gradient(
      to bottom,
      #0000 10%,
      #000 25%,
      #000 75%,
      #0000 90%);
  }

  &__item {
    display: flex;
    flex-direction: column;
    width: 100%;
    position: sticky;
    margin-top: calc(var(--scrollable-height) * var(--start));
    left: 0;
    // background-color: rgba(255,120,210,.4);
    mask-image: linear-gradient(
      to bottom,
      #0000,
      #000 1rem,
      #000 (calc(100% - 1rem)),
      #0000);
    mask-size: auto 200%;
    mask-position-y: calc(50% - ((var(--scrollValue) - var(--start)) * 1000%));
    mask-repeat: no-repeat;

    &.center-x {
      align-items: center;
    }

    &.end-x {
      align-items: flex-end;
    }

    &.start-y {
      top: 0;
    }

    &.center-y {
      top: 50%;
      transform: translateY(-50%);
    }

    &.end-y {
      justify-content: flex-end;
      top: 75%;
    }
  }

  ul, p, h1, h2 {
    margin: 0;
    padding: 0;
    list-style-type: none;
  }
}